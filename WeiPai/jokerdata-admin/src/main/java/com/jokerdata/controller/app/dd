<?php
namespace Api\Controller; 

class UserController extends BaseController {
    
    //个人信息
    public function user_info(){
        //用户信息
        $info = $this->user_info;
        unset($info['user_password']);
        unset($info['user_pay_pwd']);
        $time = time();
        $day = date('Y-m-d',$time);
        //今日签到
        $W = [];
        $W['user_id'] = $info['user_id'];
        $W['sign_date'] = $day;
        $sign = D('Sign')->where($W)->getField('sign_id');
        //昨日积分
        $e = strtotime($day);$f = $e-3600*24;
        $W = [];
        $W['log_user_id'] = $info['user_id'];
        $W['add_time'] = [['egt',$f],['elt',$e]];
        $W['log_type'] = ['in',['task_income','sign']];
        //task_income任务收入，task_outcome任务支出,task_back任务未完成, sign 签到

        $num = D('CoinLog')->where($W)->sum('log_av_coin');
        if(!$num){$num=0;}
        $D = [];
        $D['user_info'] = $info;
        $D['is_sign'] = $sign?1:0;
        $D['yesterday_coin'] = $num;
        output_data($D);
    }

    //个人信息
    public function user_info2(){
        //用户信息
        $info = $this->user_info;
        unset($info['user_password']);
        unset($info['user_pay_pwd']);
        $D = [];
        $D['user_info'] = $info;

        output_data($D);
    }


    
    //修改个人信息
    public function user_save(){
	    $user_id = $this->user_info['user_id'];
        //接收参数
	    $user_name = I('user_name');
	    $user_gender = I('user_gender'); 
        $user_qq = I('user_qq');
        $user_email = I('user_email');
        $user_wx = I('user_wx');
        $alipay_name = I('alipay_name');
        //验证
        $data = array();
        if($user_name){$data['user_name'] = $user_name;}
        if($user_gender){$data['user_gender'] =  $user_gender;}
        if($user_qq){$data['user_qq'] = $user_qq;}
        if($user_email){$data['user_email'] = $user_email;}
        if($user_wx){$data['user_wx'] = $user_wx;}
        if($alipay_name){$data['alipay_name'] = $alipay_name;}
        if(!$data){output_error('无参数');}
        $user = D('User');
        if(!$user->create($data)){
            output_error($user->getError());
        }
        //修改用户信息

        
        $result = $user->where(['user_id'=>$user_id])->save($data);
        if($result===false){
            output_error($user->getError());
        }else{
            output_data(1);
        }
    }
    
    

    //修改密码
    public function password_edit(){
        $model=D('User');
        //接收
        $password = I('user_password');
        $newpassword = I('newpassword');
        $renewpassword = I('renewpassword');
        //验证
        $data = array();
        $data['user_password'] = $password;
        $data['newpassword'] = $newpassword;
        $data['renewpassword'] = $renewpassword;
        $rules = array(
                array('user_password','6,16','密码长度为6~16',0,'length'),
                array('newpassword','6,16','密码长度为6~16',0,'length'),
                array('renewpassword','newpassword','两次密码不一致',0,'confirm'), // 
            );
        if(!$model->validate($rules)->create($data)){
            output_error($model->getError());
        }  
        $userinfo=$this->user_info;
          
        if(md5($password)!=$userinfo['user_password']){output_error('原密码错误');};

        $D = [];$W = [];
        $D['user_password']= md5($newpassword);
        
        $W['user_id']=$userinfo['user_id'];
        $result=$model->where($W)->save($D);
        if($result!==false){
            output_data(1);
        }else{
            output_error('修改失败');
        }
    }

    //修改支付参数
    public function save_pay(){
        $user_id = $this->user_info['user_id'];
        $wechat_openid = I('wechat_openid');
        $alipay_account = I('alipay_account');
        $user_pay_pwd = I('user_pay_pwd');
        $code = I('code');
        $A = []; 
        

        $sms = D('Sms');
        $result =  $sms->verifySms($code,$this->user_info['user_mobile'],2);
        if($result==false){
             output_error($sms->getError());
        }
        
        if($user_pay_pwd!=''){
            $len = mb_strlen($user_pay_pwd,'utf8');
            if($len >16){output_error('密码过长');}
            if($len <6 ){output_error('密码过短');}
            $A['user_pay_pwd'] = md5($user_pay_pwd);
        }

        if($wechat_openid!=''){$A['wechat_openid'] = $wechat_openid;}
        if($alipay_account!=''){$A['alipay_account'] = $alipay_account;}
        if(empty($A)){output_error('无更新参数');}
        $W = ['user_id'=>$user_id];
        $R = D('User')->where($W)->save($A); 
        if($R!==false){output_data(1);}else{output_error('更新失败');}
    }



    //修改支付参数
    public function save_pay2(){
        $user_id = $this->user_info['user_id'];
        $user_pay_pwd = I('user_pay_pwd');
        $r_user_pay_pwd = I('r_user_pay_pwd');
        if($user_pay_pwd!=$r_user_pay_pwd){
            output_error('确认密码不一致');
        }
        $code = I('code');
        $A = []; 
        
        if(md5($code)!=$this->user_info['user_pay_pwd']){
            output_error('旧支付密码错误');
        }
        
        if($user_pay_pwd!=''){
            $len = mb_strlen($user_pay_pwd,'utf8');
            if($len >16){output_error('密码过长');}
            if($len <6 ){output_error('密码过短');}
            $A['user_pay_pwd'] = md5($user_pay_pwd);
        }

        if(empty($A)){output_error('无更新参数');}
        $W = ['user_id'=>$user_id];
        $R = D('User')->where($W)->save($A); 
        if($R!==false){output_data(1);}else{output_error('更新失败');}
    } 


    //绑定微博
    public function band_weibo(){
        $user_id = $this->user_info['user_id'];
        $uid = I('uid');
        $info = I('user_info');
        if($uid==''){
            
            $info = json_decode(htmlspecialchars_decode($info),true);
            $access_token = $info['wtoken'];
            $uid = $info['uid'];
            $account_name = $info['account_name'];
            $account_avatar = $info['account_avatar'];
            $avatar_hd = $info['avatar_hd'];
            $follow_num = $info['follow_num'];
            $v_legalize = $info['v_legalize'];
            
            $location = $info['location'];
            $gender = $info['gender'];
            $friends_count = $info['friends_count'];
            $statuses_count = $info['statuses_count'];
            $created_at = $info['created_at'];

            $R1 = D('UserAccount')->chack_account($uid);
            if($R1['account_state']=='-1' ||$R1['account_state']=='-2' ){output_error('该账号禁用中');}
            if($R1['user_id']==$user_id){
                $A = [];
                $A['account_name'] =  $account_name;
                $A['account_avatar'] = $account_avatar;
                $A['avatar_hd'] = $avatar_hd;
                $A['access_token'] = $access_token;//0 1  2
                $A['account_state'] = $R1['account_state']=='1'?'1':'0';
                $A['follow_num'] = $follow_num;
                $A['v_legalize'] = $v_legalize?1:0;
                $A['location'] = $location;
                $A['gender'] = $gender;
                $A['friends_count'] = $friends_count;
                $A['statuses_count'] = $statuses_count;
                $A['created_at'] = $created_at;

                $id = D('UserAccount')->where(['account_id'=>$R1['account_id']])->save($A);
            }elseif($R1 && $R1['user_id']!=$user_id){
                output_error('已被绑定');
            }elseif(empty($R1)){
                $A = []; 
                $A['user_id'] = $user_id;
                $A['account_name'] = $account_name;
                $A['account_avatar'] = $account_avatar;
                $A['uid'] = $uid;
                $A['avatar_hd'] = $avatar_hd;
                $A['access_token'] = $access_token;
                $A['add_time'] = time();
                $A['account_state'] = 0;
                $A['follow_num'] = $follow_num;
                $A['v_legalize'] = $v_legalize?1:0;
                $A['location'] = $location;
                $A['gender'] = $gender;
                $A['friends_count'] = $friends_count;
                $A['statuses_count'] = $statuses_count;
                $A['created_at'] = $created_at;
                $id = D('UserAccount')->add($A);
            } 

        }else{
            $access_token = I('wtoken');
            $uid = I('uid');
            if($access_token=='' &&$uid=='' ){output_error('信息不完整');}

            $url = 'https://api.weibo.com/2/users/show.json?';

            $u = join_url(['access_token'=>$access_token,'uid'=>$uid,'source'=>'220475726']);//
            $U = $url.$u;
            $R = get_curl($U); 
            $R = json_decode($R,true);//dump($R);dump($U);die;
            if($R && !$R['error']){
                $R1 = D('UserAccount')->chack_account($uid);
                if($R1['account_state']=='-1' ||$R1['account_state']=='-2' ){output_error('该账号禁用中');}
                if($R1['user_id']==$user_id){
                    $A = [];
                    $A['account_name'] = $R['screen_name'];
                    $A['account_avatar'] = $R['avatar_large'];
                    $A['avatar_hd'] = $R['avatar_hd'];
                    $A['access_token'] = $access_token;
                    $A['account_state'] = $R1['account_state'];
                    $A['follow_num'] = $R['followers_count'];
                    $A['v_legalize'] = $R['verified']?1:0;
                    $id = D('UserAccount')->where(['account_id'=>$R1['account_id']])->save($A);
                }elseif($R1 && $R1['user_id']!=$user_id){
                    output_error('已被绑定');
                }elseif(empty($R1)){
                    $A = []; 
                    $A['user_id'] = $user_id;
                    $A['account_name'] = $R['screen_name'];
                    $A['account_avatar'] = $R['avatar_large'];
                    $A['uid'] = $uid;
                    $A['avatar_hd'] = $R['avatar_hd'];
                    $A['access_token'] = $access_token;
                    $A['add_time'] = time();
                    $A['account_state'] = 0;
                    $A['follow_num'] = $R['followers_count'];
                    $A['v_legalize'] = $R['verified']?1:0;
                    $id = D('UserAccount')->add($A);
                }
       
            }else{
                output_error('信息获取失败，请重新授权');
            }
        }


        if($id!==false){
            output_data(1);
        }else{
            output_error('绑定失败');
        }


    }


    //添加公众号
    public function wechat_band(){
        $user_id = $this->user_info['user_id'];

        $uid = I('uid');
        $name = I('name');
        $follow_num = I('follow_num');
        $num_screen = I('num_screen');
        $wechat_pic = I('wechat_pic');
        $acc_type = 1;
        $avatar = I('avatar');
        $tag_id = I('tag_id');   

        if($uid==''){output_error('请输入微信号');}

        $msg = D('UserAccount')->where(['uid'=>$uid])->find();
        if($msg){
            if($msg['user_id']==$user_id){
                if($name){$A['account_name'] = $name;}
                if($avatar){
                    $A['account_avatar'] = $avatar;
                    $A['avatar_hd'] = str_replace('_large.', '.', $avatar);
                }
                if($follow_num && preg_match('/^[1-9]\d*$/',$follow_num)){
                    $A['follow_num'] = $follow_num;
                    if($num_screen==''){output_error('截图不能为空');}
                    $A['num_screen'] = $num_screen;
                }
                if($wechat_pic){$A['wechat_pic'] = $wechat_pic;}
                if($msg['account_state']==2){$A['account_state']=0;}
                if(!$A){
                    output_error('请输入修改信息');
                }

                if($tag_id){
                    $tag_list = D('GzhTag')->WechatTag();
                    if(!in_array($tag_id,array_keys($tag_list))){
                        output_error('请选择合法的标签');
                    }
                    $A['gzh_tag_id'] = $tag_id;
                }

                $R = D('UserAccount')->where(['account_id'=>$msg['account_id']])->save($A);
            }else{
                output_error('已被绑定');
            }
        }else{
            if($name==''){output_error('请输入微信名称');}
            if(!preg_match('/^[1-9]\d*$/',$follow_num)){output_error('粉丝数不合格');}
            if($wechat_pic==''){output_error('微信二维码不能为空');}
            if($num_screen==''){output_error('粉丝数截图不能为空');}
            if($avatar==''){output_error('头像不能为空');}
            
            $tag_list = D('GzhTag')->WechatTag();
            if(!in_array($tag_id,array_keys($tag_list))){
                output_error('请选择合法的标签');
            }
            
            $A = [];
            $A['user_id'] = $user_id;
            $A['account_name'] = $name;
            $A['account_avatar'] = $avatar;
            $A['avatar_hd'] = str_replace('_large.', '.', $avatar);
            $A['uid'] = $uid;
            $A['access_token'] = md5($user_id.$uid);
            $A['account_state'] = 0;
            $A['add_time'] = time();
            $A['acc_type'] = 1;
            $A['follow_num'] = $follow_num;
            $A['num_screen'] = $num_screen;
            $A['wechat_pic'] = $wechat_pic;
            $A['gzh_tag_id'] = $tag_id;
            $R = D('UserAccount')->add($A);
        }

        if($R!==false){
            output_data(1);
        }else{
            output_error('失败');
        }
    }



    //绑定微信号
    public function band_weixn(){
        $user_id = $this->user_info['user_id'];
        $name = I('name');
        $avatar = I('avatar');
        $vx_code = I('vx_code');
        $open_id = I('open_id');
        $follow_num = I('follow_num');
        $num_screen = I('num_screen');
        $wechat_pic = I('wechat_pic');
        if($vx_code==''){output_error('请输入微信号');}

        $msg = D('UserAccount')->where(['access_token'=>$open_id])->find();
        if($msg){
            if($msg['user_id']==$user_id){
                if($name){$A['account_name'] = base64_encode($name);}
                if($avatar){
                    $A['account_avatar'] = $avatar;
                    $A['avatar_hd'] = $avatar;
                }
                if($follow_num && preg_match('/^[1-9]\d*$/',$follow_num)){
                    $A['follow_num'] = $follow_num;
                    if($num_screen==''){output_error('截图不能为空');}
                    $A['num_screen'] = $num_screen;
                }
                if($wechat_pic){$A['wechat_pic'] = $wechat_pic;}
                if($open_id){$A['access_token'] = $open_id;}
                if($msg['account_state']==2){$A['account_state']=0;}
                if(!$A){
                    output_error('请输入修改信息');
                }
                $R = D('UserAccount')->where(['account_id'=>$msg['account_id']])->save($A);
            }else{
                output_error('已被绑定');
            }
        }else{
            if($name==''){output_error('请输入微信名称');}
            if(!preg_match('/^[1-9]\d*$/',$follow_num)){output_error('粉丝数不合格');}
            if($wechat_pic==''){output_error('微信二维码不能为空');}
            if($num_screen==''){output_error('粉丝数截图不能为空');}
            if($avatar==''){output_error('头像不能为空');}
            $A['user_id'] = $user_id;
            $A['account_name'] = base64_encode($name);
            $A['account_avatar'] = $avatar;
            $A['uid'] = $vx_code;
            $A['access_token'] = $open_id;
            $A['avatar_hd'] = $avatar;
            $A['account_state'] = 0;
            $A['add_time'] = time();
            $A['acc_type'] = 2;
            $A['follow_num'] = $follow_num;
            $A['num_screen'] = $num_screen;
            $A['wechat_pic'] = $wechat_pic;
            $R = D('UserAccount')->add($A);
        }
        
        if($R!==false){output_data(1);}else{output_error('失败');}
    }




    //我的微博列表
    public function weibo_list(){
        $user_id = $this->user_info['user_id'];
        $W = array();
        $W['user_id'] = $user_id;

        $F = 'account_id,user_id,account_name,account_avatar,uid,access_token,account_state,account_limit,acc_type,
        disable_reason,nopass_reason,acc_type,follow_num,num_screen,wechat_pic,gzh_tag_id';
        $L = D('UserAccount')->where($W)->field($F)->select();
        if(empty($L)){$L=[];}else{
            $A = [];$B = [];$C = [];
            foreach($L as $x=>$y){
                $L[$x]['time_text'] = date('Y-m-d H:i',$y['account_limit']);
                if($y['num_screen']){$L[$x]['num_screen'] = getAttachUrl($y['num_screen']);}
                if($y['wechat_pic']){$L[$x]['wechat_pic'] = getAttachUrl($y['wechat_pic']);}
                if($y['acc_type']=='1'){
                    $L[$x]['account_avatar'] = getAttachUrl($y['account_avatar']);
                    $L[$x]['avatar_hd'] = getAttachUrl($y['avatar_hd']);
                }elseif($y['acc_type']=='2'){
                    $L[$x]['account_name'] = base64_decode($y['account_name']);
                }
            }

            foreach($L as $x=>$y){
                switch($y['acc_type']){
                    case '0':
                        $A[] = $y;
                        break;
                    case '1':
                        $B[] = $y;
                        break;
                    case '2':
                        $C[] = $y;
                        break;
                }
            }
        }
        if(!empty($B)){
            $Tag = D('GzhTag')->WechatTag();
            foreach($B as $x=>$y){
                $B[$x]['tag_name'] = $Tag[$y['gzh_tag_id']]?$Tag[$y['gzh_tag_id']]:'';
            }
        }
        $D = [];
        $D['weibo_list'] = $A;
        $D['public_list'] = $B;
        $D['wechat_list'] = $C;
        output_data($D);
    }



    public function user_account(){
        $user_id = $this->user_info['user_id'];
        $account_id = I('account_id');
        $msg = D('UserAccount')->where(['account_id'=>$account_id,'user_id'=>$user_id])->find();
        if(!$msg){
            output_data(['info'=>[]]);
        }else{
            
            if($msg['account_limit']){$msg['time_text'] = date('Y-m-d H:i',$msg['account_limit']);}
            if($msg['num_screen']){$msg['num_screen'] = getAttachUrl($msg['num_screen']);}
            if($msg['wechat_pic']){$msg['wechat_pic'] = getAttachUrl($msg['wechat_pic']);}
            if($msg['acc_type']=='1'){$msg['account_avatar'] = getAttachUrl($msg['account_avatar']);$msg['avatar_hd'] = getAttachUrl($msg['avatar_hd']);}elseif($msg['acc_type']=='2'){
                $msg['account_name'] = base64_decode($msg['account_name']);
            }

            if($msg['gzh_tag_id']){
                $Tag = D('GzhTag')->WechatTag();
                $msg['tag_name'] = $Tag[$msg['gzh_tag_id']];
            }

            output_data(['info'=>$msg]);
        }   
    }



    //某一微博下的新动态
    public function weibo_news_list(){
        $user_id = $this->user_info['user_id'];
        $token = I('wtoken');
        $num = I('num',5);
        if($token==''){output_error('无参数');}
        $where = array('access_token'=>$token);
        $msg = D('UserAccount')->where($where)->field('account_id,uid')->find();
        if(!$msg){output_error('未绑定');}
        $U = 'https://api.weibo.com/2/statuses/user_timeline.json?source=220475726&uid='.$msg['uid'].'&count='.$num.'&access_token='.$token.'&feature=1';

        $L = get_curl($U);
        $L = json_decode($L,true);
        if($L['error']){
            output_error($L['error']);
        }else{
            foreach($L['statuses'] as $x=>$y){
                $L['statuses'][$x]['time_last'] = time_get_ymdhis(strtotime($y['created_at']));
            }            
            $D = [];
            $D['wtoken'] = $token;
            $D['list'] = $L;
            output_data($D);
        }
            
    }



    //根据微博id获取微博信息
    public function weibo_info(){
        $user_id = $this->user_info['user_id'];
        $token = I('wtoken');
        $id = I('id');
        $U = 'https://api.weibo.com/2/statuses/show.json?access_token='.$token.'&id='.$id;

        $info = get_curl($U);$info = json_decode($info,true);dump($info);dump($U);
        if($info['error']){
            output_error($info['error']);
        }else{
            output_data(['info'=>$info]);
        }
    }



    //
    public function add_befor(){
        $user_id = $this->user_info['user_id'];
        $is_wb = I('is_wb',1);
        $url = I('url');
        $A = weibo_url($url);
        $uid = $A['uid'];
        $wb_id = $A['wb_id'];
        
        if($is_wb==1){
            $W = [];
            $W['uid'] = $uid;
            $W['user_id'] = $user_id;
            $F ='account_id,user_id,account_name,uid,avatar_hd,access_token';
            $msg = D('UserAccount')->where($W)->field($F)->find();
            if(!$msg['access_token']){output_error('此微博在本应用下无授权');}
            $token = $msg['access_token'];
            $U = 'https://api.weibo.com/2/statuses/show.json?access_token='.$token.'&id='.$wb_id;
            $info = get_curl($U);
            $info = json_decode($info,true);//dump($info);
        }elseif($is_wb=='2'){
            if($url==''){output_error('请输入链接');}
            $url = urldecode($url);
            $info = get_public_info($url);
        }
            
        output_data(['info'=>$info]);
    }





    public function add_weibo_t(){

        $user_id = $this->user_info['user_id'];
        $user_name = $this->user_info['user_name'];
        $user_coin = $this->user_info['user_coin'];
        $token = I('wtoken');
        $share_url = I('share_url');
        $share_coin = I('share_coin');
        $share_num = I('share_num');
        $is_original = I('is_original');
        $tag_id = I('tag_id');
        $wb_id = I('wb_id');

        $total_coin = $share_coin*$share_num;
        if($user_coin<$total_coin){output_data('积分数量不够');}

        S(array('type'=>'File','expire'=>600));
        $TagList = S('TagList');
        if(!$TagList){
            $TagList = D('ShareTag')->field('tag_id,tag_name')->order('tag_sort desc')->select();
            S('TagList',$TagList,600);
        }
        foreach($TagList as $x=>$y){
            if($y['tag_id']==$tag_id){
                $tag_name = $y['tag_name'];
                break;
            }
        } 

        $time = time();
        $share_type = I('share_type',1);
        if(!in_array($share_type,[1,2,3])){
            output_error('分享类型不合理');
        }

        switch($share_type){
            case '1':
                if($share_url){
                    $A = weibo_url($share_url);
                    $uid = $A['uid'];
                    $wb_id = $A['wb_id'];
                    $W = [];
                    $W['uid'] = $uid;
                    $W['user_id'] = $user_id;
                    $F ='account_id,user_id,account_name,uid,avatar_hd,access_token';
                    $msg = D('UserAccount')->where($W)->field($F)->find();
                    if(!$msg['access_token']){output_error('此微博在本应用下无授权');}
                    $token = $msg['access_token'];
                }else{
                    $W = [];
                    $W['access_token'] = $token;
                    $W['user_id'] = $user_id;
                    $W['account_state'] = ['in',[0,1,2]];
                    $W['acc_type'] = 0;
                    $F ='account_id,user_id,account_name,uid,avatar_hd';

                    $msg = D('UserAccount')->where(['access_token'=>$token])->find();
                    if(!$msg){
                        output_error('此微博不存在或被禁用');
                    }  
                }            
                //  获取视频
                $cur_msg =  get_video($wb_id);
                $share_video = $cur_msg['url'];
                $p = '/^[1-9]\d*$/';
                if(!preg_match($p, $share_coin) || !preg_match($p, $share_num)){
                    output_error('数量或金额格式有误');
                }

                $U = 'https://api.weibo.com/2/statuses/show.json?access_token='.$token.'&id='.$wb_id;
                $info = get_curl($U);$info = json_decode($info,true);
                if($info['error']){
                    output_error('微博必须为授权账号原微博');
                }
                if(is_array($info['retweeted_status'])){
                    output_error('非原创微博不允许获取发布');
                }

                $pic = [];
                if($cur_msg['pic']){
                    $pic[] = [
                        'thumbnail_pic'=>$cur_msg['pic'],
                        'bmiddle_pic'=>$cur_msg['pic'],
                        'original_pic'=>$cur_msg['pic']
                    ];
                } 
                if($info['pic_urls']){
                    $dir = array_map('get_pic_dir',['thumbnail_pic'=>$info['thumbnail_pic'],'bmiddle_pic'=>$info['bmiddle_pic'],'original_pic'=>$info['original_pic']]);

                    if($info['pic_urls']){
                        foreach($info['pic_urls'] as $x=>$y){           
                            $name = get_pic_name($y['thumbnail_pic']);
                            foreach($dir as $k=>$v){
                                $pic[$x][$k] = $v.'/'.$name;
                            }
                        }              
                    }
                }
                if($info['retweeted_status']['pic_urls']){
                    $dir = array_map('get_pic_dir',
                            [
                                'thumbnail_pic'=>$info['retweeted_status']['thumbnail_pic'],
                                'bmiddle_pic'=>$info['retweeted_status']['bmiddle_pic'],
                                'original_pic'=>$info['retweeted_status']['original_pic']
                            ]
                        );

                    if($info['retweeted_status']['pic_urls']){
                        foreach($info['retweeted_status']['pic_urls'] as $x=>$y){           
                            $name = get_pic_name($y['thumbnail_pic']);
                            foreach($dir as $k=>$v){
                                $pic[$x][$k] = $v.'/'.$name;
                            }
                        }              
                    }
                }

                $A['share_image'] = json_encode($pic);            
                $share_content = $info['text'];
                preg_match('/(?<=\b)(http:\/\/t\.cn\/[0-9a-zA-Z]{6,9}|http:\/\/m\.weibo\.cn\/\d{5,12}\/\d{14,18})(?=\b)/',$info['text'],$e);
                $A['short_url'] = $e[count($e)-1];
                $A['account_id'] = $msg['account_id'];
                $A['wb_id'] = $info['idstr'];
                if(!empty($share_video)){
                    $A['share_video'] = json_encode($share_video);
                }
                $A['expires'] = $cur_msg['time']?$cur_msg['time']:0;       
                $A['user_name'] = $msg['account_name'];

                break;
            case '2':

                $W = [];
                $W['access_token'] = $token;
                $W['user_id'] = $user_id;
                $W['account_state'] = ['in',[0,1,2]];
                $W['acc_type'] = 1;
                $F ='account_id,user_id,account_name,uid,avatar_hd';

                $msg = D('UserAccount')->where(['access_token'=>$token])->find();
                if(!$msg){
                    output_error('此账号不存在或被禁用');
                }
                $A['account_id'] = $msg['account_id'];
                $A['wb_id'] = '';
                $A['share_video'] = '';
                $A['expires'] = 0;
                $A['user_name'] = $msg['account_name'];
                $share_url = urldecode($share_url);
                $C = get_public_info($share_url);
                if(!$C){output_error('无法获取数据');}
                if($C['pic_list']){$A['share_image'] = json_encode($C['pic_list']);}else{$A['share_image']='';}
                $share_content = mb_substr($C['content'],0,200,'utf8');            
                $info['text'] = $C['title'];
                
                $A['json'] = json_encode([
                    'title' => $C['title'],
                    'author' => $C['user'],
                    'pub_name'=>$C['pub_name'],
                    'function'=>$C['doing'],
                    'publish_time'=>$C['time'],
                    'var_list'=>$C['var']
                ]);
                $A['share_img'] = $this->get_pic($C['var']['msg_cdn_url']);
                break;
            case '3':
                
                break;
        }

        //$A = [];
        if($is_original==1){ 
            $A['share_state'] = 1; 
        }else{
            $A['share_state'] = 0;
        }

        $A['user_id'] = $user_id;       
        $A['share_content'] = base64_encode($share_content);
        $A['share_type'] = $share_type;
        $A['share_url'] = $share_url?$share_url:'';
        $A['share_coin'] = $share_coin;
        $A['original_coin'] = $share_coin;
        $A['share_num'] = $share_num;
        $A['have_shared_num'] = 0;
        $A['total_coin'] = $total_coin;
        $A['is_original'] = $is_original;
        $A['add_time'] = $time;
        $A['tag_id'] = $tag_id;
        $A['tag_name'] = $tag_name;
        $A['share_extra_coin'] = 0;
        $A['from_app'] = '1';
        
        
        $L = [];
        $L['log_user_id'] = $user_id;
        $L['log_user_name'] = $user_name;
        $L['log_type'] = 'task_outcome';
        $L['log_av_coin'] = -$total_coin;
        $L['log_freeze_coin'] = 0;
        $L['add_time'] = $time;
    
        M()->startTrans();
        try{
            $W = [];
            $W['user_id'] = $user_id;
            
            $R = D('User')->where($W)->setDec('user_coin',$total_coin);
            if(!$R){output_error('用户积分更新异常');}

            $log_id = D('CoinLog')->add($L);
            if(!$log_id){throw new \Exception('日志写入失败');}

            $share_id = D('Share')->add($A);
            if(!$share_id){throw new \Exception('任务发布失败');}
            /*if($is_original==0){

                $M = new \Api\Controller\PublicController();
                $M->math($share_id,$share_num,$share_coin,3);
            }*/
            M()->commit();
            $A = [];
            $A['notice_type'] = 'push';
            $A['notice_content'] = '您的任务《'.mb_substr(filterEmoji($info['text']), 0, 24, 'utf-8').'》发布成功，正在推广';
            $A['is_new'] = 0;
            $A['author_name'] = '';
            $A['add_time'] = $time;
            $notice_id = D('SystemMsg')->add($A);
            $B = [];
            $B['user_id'] = $user_id;
            $B['notice_id'] = $notice_id;
            $B['is_read'] = 0;
            $R = D('SystemmsgUser')->add($B);
//dump($A);dump($notice_id);dump($B);dump($R);
            output_data(1);
        }catch(\Exception $a){
            M()->rollback();
            output_error($a->getMessage());
        }     
    }



    function get_pic($URL){
        if($URL==''){return false;}
        $m = file_get_contents($URL);
        $url ='./Upload/WechatPic/'.time().rand(100,999).$x.'_large.jpg';
        $d = file_put_contents($url, $m);
        $new_name = $this->resize_img($url);
        unlink($url);
        return $new_name;
    }

    
    function resize_img($url){    
        $file = $url;
        $P = getimagesize($url);
        $Type = $P['mime'];
        switch ($Type) {
            case 'image/gif':
                $ext = 'gif';
                break;
            case "image/pjpeg":
            case "image/jpeg":
            case "image/jpg":
                $ext = 'jpeg';
                break;
            case "image/png":
            case "image/x-png":
                $ext = 'png';
                break;
        }
        $newfile = preg_replace('/_large\.\w{3,5}/', '.'.$ext, $url);
        $newfile_str = $newfile;
        $width = $P[0];
        $height = $P[1];
        $new_width = 120;
        $new_height = 120;

        $newfile = imagecreatetruecolor($new_width, $new_height); 
        //2.上色 
        $color=imagecolorallocate($newfile,255,255,255); 
        //3.设置透明 
        imagecolortransparent($newfile,$color); 
        imagefill($newfile,0,0,$color);
        $fun = 'imagecreatefrom'.$ext;
        $image = $fun($file);
        
        imagecopyresized($newfile, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
        //90代表的是质量、压缩图片容量大小
        $func = 'image'.$ext;
        $func($newfile, $newfile_str);
        imagedestroy($newfile);
        imagedestroy($image);
        return $newfile_str;        
    }


    //签到
    public function user_sign(){
        $user_id = $this->user_info['user_id'];
        $sign_limit = $this->user_info['sign_limit'];
        $coin_total = $this->user_info['coin_total'];
        $time = time();
        $td = $time;
        $yd = $time-24*3600;
        $TD = date('Y-m-d',$td);
        $YD = date('Y-m-d',$yd);

        if(date('H',$time)==0){output_error('请凌晨一点时候再试');}

        S(array('type'=>'File','expire'=>600));
        $SignCoin = S('SignCoins');
        if(!$SignCoin){
            $SignCoin = D('SignCoin')->getField('limit_num,sign_coin',true);
            S('SignCoins',$SignCoin,600);
        }

        
        $W = [];
        $W['user_id'] = $user_id;
        $W['sign_date'] = ['in',[$YD,$TD]];
        $msg = D('Sign')->where($W)->getField('sign_date',true);
        if(in_array($TD,$msg)){output_error('今日已签到');}

        if(in_array($YD,$msg)){
            $limit = $sign_limit+1; 
        }else{
            $limit = 1;
        }

        $item = $limit%count($SignCoin);
        if($item===0){$item=count($SignCoin);}

        $coin = $SignCoin[$item];

        M()->startTrans();
        try{
            $D = [];
            $D['sign_limit'] = $limit;
            $D['user_coin'] = $this->user_info['user_coin']+$coin;
            $D['coin_total'] = $coin_total+$coin;
            $R = D('User')->where(['user_id'=>$user_id])->save($D);
            if($R===false){throw new Exception("更新失败");}
            
            $B =[];
            $B['user_id'] = $user_id;
            $B['sign_coin'] = $coin;
            $B['sign_date'] = $TD;
            $B['sign_state'] = 0;
            $B['add_time'] = $td;
            $sign_id = D('Sign')->add($B);
            if(!$sign_id){throw new Exception("记录写入失败");}

            $A = [];
            $A['log_user_id'] = $user_id;
            $A['log_user_name'] = $this->user_info['user_name'];
            $A['log_type'] = 'sign';
            $A['log_av_coin'] = $coin;
            $A['log_freeze_coin'] = 0;
            $A['add_time'] = $td;
            $id = D('CoinLog')->add($A);
            if($id===false){throw new Exception("日志记录写入失败");}
            M()->commit();
            output_data(1);
        }catch(\Exception $a){
            M()->rollback();
            output_error($a->getMessage());
        }
            

    }






    //我的积分明细
    public function coin_list(){
        $user_id = $this->user_info['user_id'];
        $user_coin = $this->user_info['user_coin'];

        $page = I('curpage',1);
        $L = D('CoinLog')->MyCoinList($user_id,$page);
        $D = [];
        $D['user_coin'] = $user_coin;
        $D['list'] = $L['list'];
        output_data($D,mobile_page($L['page_num']));

    }




    //我的资金明细
    public function money_list(){
        $user_id = $this->user_info['user_id'];
        $available_predeposit = $this->user_info['available_predeposit'];

        $page = I('curpage',1);
        $L = D('PdLog')->MyMoneyList($user_id,$page);
        $D =[];
        $D['available_predeposit'] = $available_predeposit;
        $D['list'] = $L['list'];
        output_data($D,mobile_page($L['page_num']));

    }


    //通知类型 系统消息 : system , 商机推送 : shop , 互推进行中 : push 互推成功（发起人）:succ_master 互推成功（转发人）：succ_user 互推失败push_false
    //我的互推消息
    public function push_notice(){
        $user_id = $this->user_info['user_id'];
        $page = I('curpage',1);
        $W = [];
        $W['user_id'] = $user_id;
        //$W['is_read'] = 0;
        $W['notice_type'] = ['in',['push','succ_master','succ_user','push_false']];
        $L = D('SystemmsgUser')->PushList($W,$page);
        $D = [];
        $D['list'] = $L['list'];

        output_data($D,mobile_page($L['page_num']));
    }
    //我的商机消息
    public function shop_notice(){
        $user_id = $this->user_info['user_id'];
        $page = I('curpage',1);
        $W = [];
        $W['user_id'] = $user_id;
        $W['notice_type'] = 'shop';
        $L = D('SystemmsgUser')->PushList($W,$page);
        $D = [];
        $D['list'] = $L['list'];
        
        output_data($D,mobile_page($L['page_num']));
    }
    
    
    


    //签到首页
    public function sign_index(){
        $user_id = $this->user_info['user_id'];
        $sign_limit = $this->user_info['sign_limit'];
        $SignCoin = D('SignCoin')->SignCoin();
        $limit = $sign_limit%count($SignCoin);
        $msg = D('Article')->cache('SignRule',100)->where(['article_code'=>'sign_rule'])->find();
        if(!$msg){$msg=[];}
        $D = [];
        $D['sign_limit'] = $sign_limit;
        $D['limit'] = $limit;
        $D['sign_coin'] = $SignCoin;
        $D['sign_rule'] = $msg;
        output_data($D);
    }

    //通知类型 系统消息 : system , 商机推送 : shop , 互推进行中 : push 互推成功（发起人）:succ_master 互推成功（转发人）：succ_user 互推失败push_false

    public function count_num(){
        $user_id = $this->user_info['user_id'];
        
        $W = [];
        $W['user_id'] = $user_id;
        $W['notice_type'] = ['in',['shop','push','succ_master','succ_user','push_false']];
        $W['is_read'] = 0;
        $F = 'notice_type,count(a.notice_id) as num';
        $G = 'notice_type';
        $J = 'left join g_systemmsg_user u on u.notice_id=a.notice_id';
        $L = D('SystemMsg')->alias('a')->join($J)->where($W)->field($F)->group($G)->select();
        $push = 0;$shop = 0;
        if($L){
            foreach($L as $x=>$y){
                if($y['notice_type']=='shop'){
                    $shop += $y['num'];
                }else{
                    $push += $y['num'];
                }

            }
        }
        output_data(['shop'=>$shop,'push'=>$push]);
    }





    //用户反馈
     public function feedback_add(){
        $userinfo = $this->user_info;
        $user_name = $userinfo['user_name'];
        $user_id = $userinfo['user_id'];
        $feedback_content = I('feedback_content');
        $email = I('email');
        if($feedback_content==''){output_error('请输入信息');}
        $feedback_content = filterEmoji($feedback_content);
        if(mb_strlen($feedback_content,'utf8')>150){output_error('文字过长');};
        if(!preg_match('/.+@[a-zA-Z.]+/',$email)){output_error('邮箱不合法');}
        $A = array();
        $A['user_id'] = $user_id;
        $A['user_name'] = $user_name;
        $A['is_read'] = 0;
        $A['feedback_content'] = $feedback_content;
        $A['add_time'] = time();
        $A['user_mail'] = $email;

        $feedback_id = M('feedback')->add($A);
        if($feedback_id){output_data(1);}else{output_error('提交失败');}
    }



























    //附件上传
    public function file_upload(){
        $upload = new \Think\Upload();// 实例化上传类
        $upload->maxSize   =     10*3145728 ;// 设置附件上传大小
        $upload->exts      =     array('jpg', 'gif', 'png', 'jpeg','heic');// 设置附件上传类型
        $upload->rootPath  =      './Upload/'; // 设置附件上传根目录
        $upload->savePath  =      'image/'; // 设置附件上传（子）目录
        // 上传文件 
        $info   =   $upload->upload();
        if(!$info) {
            output_error($upload->getError());
        }else{// 上传成功 获取上传文件信息
            foreach($info as $file){
                $result =  './Upload/'.$file['savepath'].$file['savename'];
                output_data(array('result'=>$result));
            }
        }
    }

    //视频上传
    public function video_upload(){
        $upload = new \Think\Upload();// 实例化上传类
        $upload->maxSize   =     8388608*10;// 设置附件上传大小
        $upload->exts      =     array('mp4', 'avi','3gp','rm','jpg', 'gif', 'png', 'jpeg','heic');// 设置附件上传类型
        $upload->rootPath  =      './Upload/'; // 设置附件上传根目录
        $upload->savePath  =      'video/'; // 设置附件上传（子）目录
        // 上传文件 
        $info   =   $upload->upload();

        //dump($info);        
        if(!$info) {
            output_error($upload->getError());
        }else{// 上传成功 获取上传文件信息
            foreach($info as $file){
                $result[$file['key']] =  './Upload/'.$file['savepath'].$file['savename'];
                
            }
            output_data(array('result'=>$result));
        }
    }

    //多文件上传
    public function files_upload(){
        $upload = new \Think\Upload();// 实例化上传类
        $upload->maxSize   =     10*3145728 ;// 设置附件上传大小
        $upload->exts      =     array('jpg', 'gif', 'png', 'jpeg','mp4','heic');// 设置附件上传类型
        $upload->rootPath  =      './Upload/'; // 设置附件上传根目录
        $upload->savePath  =      'image/'; // 设置附件上传（子）目录
        $upload->replace   = false;
        $upload->autoSub = false;
        // 上传文件 
        $info   =   $upload->upload();

        if(!$info) {
            output_error($upload->getError());
        }else{
             // 上传成功 获取上传文件信息
             foreach($info as $k=>$v)
            {               
                $image = new \Think\Image();
                $image->open('./Upload/image/'.$v['savename']);

                $array = explode('.',$v['savename']);
                $name = $array[0];
                $ext = $array[1];
                $file = './Upload/image/'.$v['savename'];
                $newfile = './Upload/image/'.$name.'_large.'.$ext;
                copy($file,$newfile);             
                // 生成一个居中裁剪为150*150的缩略图并保存为thumb.jpg
                
                $image->thumb(200, 200,\Think\Image::IMAGE_THUMB_CENTER)->save('./Upload/image/'.$name.'.'.$ext);
                // $v['savename'] = $name.'_large.'.$ext;
                $result[$k]['savepath'] =  './Upload/'.$v['savepath'].$name.'.'.$ext;
                $result[$k]['savepath_large'] =  './Upload/'.$v['savepath'].$name.'_large.'.$ext;
            }
             output_data(array('result'=>$result));
        }
    }


    //用户上传头像
    public function avatar_upload(){
        $ext = array('jpg','png','heic','HEIC','JPG','PNG');
        $user_id = $this->user_info['user_id'];
        $upload = new \Think\Upload();// 实例化上传类
        $upload->maxSize   =     10*3145728 ;// 设置附件上传大小
        $upload->exts      =     array('jpg','png','heic','HEIC','JPG','PNG');// 设置附件上传类型
        $upload->rootPath  =      './Upload/avatar/'; // 设置附件上传根目录
        $upload->saveName  = 'avatar_'.$user_id;
        $upload->replace   = true;
        $upload->autoSub = false;
        // 上传单个文件 
        $info   =   $upload->uploadOne($_FILES['pic']);
        if(!$info) {// 上传错误提示错误信息
            output_error($upload->getError());
        }else{// 上传成功 获取上传文件信息
            unset($ext[array_search($info['ext'], $ext)]);
            foreach($ext as $y){unlink(SITE_PATH.'/Upload/avatar/avatar_'.$user_id.'.'.$y);}
            output_data(array('result'=>'./Upload/avatar/'.$info['savepath'].$info['savename']));
        }


    }

}








